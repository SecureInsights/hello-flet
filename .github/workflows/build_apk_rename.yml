name: Build Android APK (Fully Cached)

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "应用名称"
        required: false
        default: "Todolist"
        type: string
      icon_path:
        description: "APK 图标文件（仓库内相对路径，如 assets/my_icon.png）"
        required: false
        default: "assets/todo.png"
        type: string

  push:
    tags: [ "v*" ]

env:
  FLUTTER_VERSION: 3.29.2
  PYTHON_VERSION: 3.11
  BUILD_TOOLS_VERSION: 34.0.0
  APKTOOL_VERSION: 2.12.0
  JAVA_VERSION: 17

jobs:
  android-apk:
    runs-on: ubuntu-latest
    steps:
      # 1. 代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Java（apksigner 需要）
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      # 3. Flutter SDK（官方 action 自带缓存）
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: stable
          cache: true

      # 4. 缓存 Dart/Flutter 包 + Gradle
      - name: Cache Pub & Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: deps-${{ runner.os }}-${{ hashFiles('pubspec.yaml', '**/gradle-wrapper.properties') }}
          restore-keys: deps-${{ runner.os }}-

      # 5. Python（带 pip 缓存）
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      # 6. 安装 Python 依赖
      - name: Install Flet
        run: pip install flet

      # 7. 缓存 Apktool
      - name: Cache Apktool
        id: cache-apktool
        uses: actions/cache@v4
        with:
          path: apktool.jar
          key: apktool-${{ env.APKTOOL_VERSION }}

      - name: Download Apktool (if cache miss)
        if: steps.cache-apktool.outputs.cache-hit != 'true'
        run: |
          wget -q -O apktool.jar \
            "https://github.com/iBotPeaches/Apktool/releases/download/v${{ env.APKTOOL_VERSION }}/apktool_${{ env.APKTOOL_VERSION }}.jar"

      # 8. 缓存 Android SDK
      - name: Cache Android SDK
        id: cache-android-sdk
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/android-sdk
            ~/.android
          key: android-sdk-${{ env.BUILD_TOOLS_VERSION }}

      # 9. 安装 Android SDK & Build-Tools（若缓存未命中）
      - name: Setup Android SDK
        if: steps.cache-android-sdk.outputs.cache-hit != 'true'
        uses: android-actions/setup-android@v3

      - name: Install Build-Tools
        run: |
          sdkmanager --install "build-tools;${{ env.BUILD_TOOLS_VERSION }}"

      # 10. 可选：替换图标
      - name: Use custom icon
        run: |
          ICON="${{ github.event.inputs.icon_path || 'assets/icon.png' }}"
          [ -f "$ICON" ] && cp "$ICON" assets/icon.png || echo "图标不存在，使用默认"

      # 11. 构建 APK
      - name: Build APK
        run: flet build apk --verbose

      # 12. 找到 APK
      - name: Find APK
        id: find_apk
        run: |
          apk_path=$(find build -name "*.apk" -type f | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT

      # 13. 反编/重打包并改 label
      - name: Modify APK Label
        run: |
          APK_IN=${{ steps.find_apk.outputs.APK_PATH }}
          APK_OUT="modified-${{ github.event.inputs.app_name || 'Todolist' }}.apk"
          NEW_NAME=${{ github.event.inputs.app_name || 'Todolist' }}
          WORK_DIR=$(mktemp -d)

          java -jar apktool.jar d -o "$WORK_DIR/decoded" "$APK_IN"
          sed -i "s/android:label=\"[^\"]*\"/android:label=\"$NEW_NAME\"/g" \
            "$WORK_DIR/decoded/AndroidManifest.xml"

          java -jar apktool.jar b -o "$APK_OUT" "$WORK_DIR/decoded"
          echo "REPACKED_APK=$APK_OUT" >> $GITHUB_ENV

      # 14. 缓存/生成 debug keystore
      - name: Cache debug keystore
        id: cache-keystore
        uses: actions/cache@v4
        with:
          path: debug.keystore
          key: debug-keystore-${{ env.JAVA_VERSION }}

      - name: Generate debug keystore (if cache miss)
        if: steps.cache-keystore.outputs.cache-hit != 'true'
        run: |
          keytool -genkey -v -keystore debug.keystore \
            -storepass android -alias androiddebugkey -keypass android \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=Android Debug,O=Android,C=US"

      # 15. 签名 APK
      - name: Sign APK
        run: |
          SIGNED_APK="signed-${{ env.REPACKED_APK }}"
          SIGNER="$ANDROID_SDK_ROOT/build-tools/${{ env.BUILD_TOOLS_VERSION }}/apksigner"

          $SIGNER sign \
            --ks debug.keystore \
            --ks-pass pass:android \
            --key-pass pass:android \
            --out "$SIGNED_APK" \
            "${{ env.REPACKED_APK }}"

          mv "$SIGNED_APK" "${{ env.REPACKED_APK }}"

      # 16. 上传成品
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.app_name || 'Todolist' }}-Android
          path: ${{ env.REPACKED_APK }}
