name: Build Android APK

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "应用名称"
        required: false
        default: "Todolist"
        type: string
      icon_path:
        description: "APK 图标文件（仓库内相对路径，如 assets/my_icon.png）"
        required: false
        default: "assets/todo.png"
        type: string

  push:
    tags: [ "v*" ]

jobs:
  android-apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter & cache SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          channel: stable
          cache: true

      - name: Setup Python & cache pip
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Flet
        run: pip install flet

      - name: Cache Flutter
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-flutter-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      # ① 如果用户给了图标，就替换默认 assets/icon.png
      - name: Use custom icon
        run: |
          ICON="${{ github.event.inputs.icon_path || 'assets/icon.png' }}"
          if [ -f "$ICON" ]; then
            echo "使用图标: $ICON"
            cp "$ICON" assets/icon.png
          else
            echo "图标文件不存在，保持默认 assets/icon.png"
          fi

      # ② 构建 APK（不带 --icon / --name）
      - name: Build APK
        run: flet build apk --verbose

      - name: Find APK
        id: find_apk
        run: |
          apk_path=$(find build -name "*.apk" -type f | head -n 1)
          echo "APK_PATH=$apk_path" >> $GITHUB_OUTPUT
          echo "Detected APK at: $apk_path"

      - name: Download apktool.jar
        run: |
          APKTOOL_JAR="apktool.jar"
          if [ ! -f "$APKTOOL_JAR" ]; then
            wget -q -O $APKTOOL_JAR https://github.com/iBotPeaches/Apktool/releases/download/v2.8.0/apktool_2.8.0.jar
          fi

      - name: Modify APK Label
        run: |
          # 定义变量
          APK_IN=${{ steps.find_apk.outputs.APK_PATH }}
          APK_OUT="modified-${{ github.event.inputs.app_name || 'Todolist' }}.apk"
          NEW_NAME=${{ github.event.inputs.app_name || 'Todolist' }}
          APKTOOL_JAR="apktool.jar"
          WORK_DIR=$(mktemp -d)

          # 修改 AndroidManifest.xml 的 label
          patch_manifest() {
            local src=$1
            local dst=$2
            local new_name=$3

            # 解码 APK
            java -jar $APKTOOL_JAR d -o "$WORK_DIR/decoded" "$src"
            manifest_path="$WORK_DIR/decoded/AndroidManifest.xml"

            # 修改 label
            sed -i "s/android:label=\"[^\"]*\"/android:label=\"$new_name\"/g" "$manifest_path"

            # 重新打包 APK
            java -jar $APKTOOL_JAR b -o "$dst" "$WORK_DIR/decoded"
          }

          # 主流程
          patched_manifest_apk="$WORK_DIR/patched_manifest.apk"
          patch_manifest "$APK_IN" "$patched_manifest_apk" "$NEW_NAME"

          # 拷贝结果
          mv "$patched_manifest_apk" "$APK_OUT"
          echo "✅ 完成：$APK_OUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.app_name || 'Todolist' }}-Android
          path: ${{ github.workspace }}/modified-${{ github.event.inputs.app_name || 'Todolist' }}.apk
