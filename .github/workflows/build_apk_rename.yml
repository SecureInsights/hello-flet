name: Build Android APK re

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: "应用名称"
        required: false
        default: "Todolist"
        type: string
      icon_path:
        description: "APK 图标文件（仓库内相对路径，如 assets/my_icon.png）"
        required: false
        default: "assets/todo.png"
        type: string
  push:
    tags: [ "v*" ]

env:
  APKTOOL_VERSION: 2.12.0
  BUILD_TOOLS_VERSION: 34.0.0
  KEYSTORE_PASSWORD: android
  KEY_PASSWORD: android

jobs:
  android-apk:
    runs-on: ubuntu-latest
    steps:
      # ---------- 1. 拉代码 ----------
      - uses: actions/checkout@v4

      # ---------- 2. Flutter ----------
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          channel: stable
          cache: true

      # ---------- 3. 缓存 Android 工具链 ----------
      - name: Cache Android tools
        uses: actions/cache@v4
        id: cache-tools
        with:
          path: |
            ${{ github.workspace }}/.cache/apktool.jar
            ${{ github.workspace }}/.cache/build-tools
            ${{ github.workspace }}/.cache/my-release-key.keystore
          key: android-tools-${{ env.APKTOOL_VERSION }}-${{ env.BUILD_TOOLS_VERSION }}

      # ---------- 4. 下载 & 解压工具（仅缓存未命中时） ----------
      - name: Download Android tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache
          # apktool
          wget -q https://github.com/iBotPeaches/Apktool/releases/download/v${APKTOOL_VERSION}/apktool_${APKTOOL_VERSION}.jar \
            -O .cache/apktool.jar
          # build-tools（内含 zipalign 与 apksigner.jar）
          wget -q https://dl.google.com/android/repository/build-tools_r${BUILD_TOOLS_VERSION}-linux.zip \
            -O .cache/build-tools.zip
          unzip -q .cache/build-tools.zip -d .cache
          mv .cache/android-* .cache/build-tools
          # 生成 keystore
          keytool -genkey -v -keystore .cache/my-release-key.keystore \
            -alias myalias -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass ${{ env.KEYSTORE_PASSWORD }} -keypass ${{ env.KEY_PASSWORD }} \
            -dname "CN=ci, OU=ci, O=ci, L=ci, S=ci, C=CN"

      # ---------- 5. 可选：替换图标 ----------
      - name: Use custom icon
        run: |
          ICON="${{ github.event.inputs.icon_path || 'assets/icon.png' }}"
          if [ -f "$ICON" ]; then
            cp "$ICON" assets/icon.png
          fi

      # ---------- 6. 构建 APK ----------
      - run: flet build apk --verbose

      # ---------- 7. 找到并复制 APK ----------
      - name: Find APK
        id: find_apk
        run: |
          apk_path=$(find build -name "*.apk" -type f | head -n 1)
          cp "$apk_path" app-release.apk
          echo "APK_PATH=app-release.apk" >> $GITHUB_OUTPUT

      # ---------- 8. 解码 → 改 label → 对齐 → 签名 ----------
      - name: Patch, zipalign & sign
        run: |
          # 解码
          java -jar .cache/apktool.jar d -f -o decoded app-release.apk
          # 修改 label
          sed -i 's/android:label="[^"]*"/android:label="${{ github.event.inputs.app_name || 'Todolist' }}"/g' \
            decoded/AndroidManifest.xml
          # 重打包
          java -jar .cache/apktool.jar b -f -o unsigned.apk decoded
          # 对齐
          .cache/build-tools/zipalign -v 4 unsigned.apk aligned.apk
          # 签名
          java -jar .cache/build-tools/lib/apksigner.jar sign \
            --ks .cache/my-release-key.keystore --ks-key-alias myalias \
            --ks-pass pass:${{ env.KEYSTORE_PASSWORD }} \
            --key-pass pass:${{ env.KEY_PASSWORD }} \
            --out "${{ github.event.inputs.app_name || 'Todolist' }}.apk" aligned.apk

      # ---------- 9. 上传成品 ----------
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.app_name || 'Todolist' }}-Android
          path: ${{ github.event.inputs.app_name || 'Todolist' }}.apk
